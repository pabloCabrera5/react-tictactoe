{"version":3,"sources":["constants/constants.jsx","reducers/gameReducer.jsx","reducers/turnReducer.jsx","reducers/moveReducer.jsx","reducers/playerReducer.jsx","reducers/reducers.jsx","reducers/fetchReducer.jsx","reducers/actions.jsx","components/Header.jsx","components/Tictactoe/Header.jsx","components/Tictactoe/Square.jsx","components/Tictactoe/Board.jsx","components/Tictactoe/Game.jsx","components/Home.jsx","components/Tictactoe/itemList.jsx","components/Tictactoe/SavedGames.jsx","components/Main.jsx","components/ReduxProvider.jsx","serviceWorker.js","index.js"],"names":["PLAYERX","PLAYER0","VALUES","FETCH","fetching","finished","error","URISAVE","API","name","uri","APILIST","counter","setApiList","api","element","push","gameReducer","state","arguments","length","undefined","action","console","log","type","newState","JSON","parse","stringify","newValue","turn","x","y","values","turnReducer","p","movements","playerReducer","player_name","history","createBrowserHistory","globalState","combineReducers","gameRecuder","move","fetch","finish","router","connectRouter","resetGame","newPlayer","saveGame","_x","_saveGame","apply","this","_callee","value","regenerator_default","a","wrap","_context","prev","next","method","body","headers","Content-Type","then","res","json","response","catch","Error","abrupt","sent","stop","existName","exist","every","index","handleErrors","ok","concat","statusText","Header","react_default","createElement","react_router_dom","exact","to","pep","React","Component","props","welcome_text","textt","squareStyle","height","width","Square","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","squareClick","bind","assertThisInitialized","rowIndex","columIndex","board","boardClick","_this2","myclassName","className","onClick","columnIndex","style","Board","appClick","map","rowValues","row","Square_Square","key","Game","name_game","reset","handlePlayerInputChange","handlePlayerSubmit","handleGameSubmit","handleGameName","dispatch","continue","split","fetchStateSucess","fetchStateFailure","fetchState","getUri","event","preventDefault","setState","target","alert","jsonSave","text","Tictactoe_Header_Header","Board_Board","onSubmit","onChange","connect","location","pathname","Home","ItemList","load","deleteAll","el","loadGame","pos","forEach","ele","splice","pepe","delete","SavedGames","showGame","deleteGame","itemList_ItemList","Main","react_router","path","component","Tictactoe_Game","ReduxProvider","initialState","store","createStore","compose","applyMiddleware","routerMiddleware","thunk","subscribe","getState","checkWinner","wincolum","checkColumn","winRow","checkRow","winDiagonal","checkDiagonal","isFinish","setTimeout","win","i","getCol","_this3","checkArray","getDiagonal","col","column","_this4","diagonal1","diagonal2","diagonals","j","winner","es","esm","textAlign","Header_Header","Main_Main","Boolean","window","hostname","match","ReactDOM","render","ReduxProvider_ReduxProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4d779f3e.chunk.js","sourcesContent":["export const PLAYERX = \"Player 1 - Xs \";\nexport const PLAYER0 = \"Player 2 - 0s \";\nexport const VALUES = [\n    [\"-\", \"-\", \"-\"],\n    [\"-\", \"-\", \"-\"],\n    [\"-\", \"-\", \"-\"]\n];\nexport const FETCH = {\n    fetching: false,\n    finished: false,\n    error: null\n};\nexport const URISAVE = 'http://api.myjson.com/bins';\n\nexport let API = { name: 'default', uri: 'https://api.myjson.com/bins/e8cdl' }//'http://api.myjson.com/bins/i216a';\nexport function setApi(api, name) {\n    API = { name: name, uri: api }\n    //API = api;\n}\nexport function getApi() {\n    return API;\n}\n\nexport let APILIST = [\n    { name: 'default', uri: 'https://api.myjson.com/bins/s7ikp' },\n    { name: 'grillo', uri: 'https://api.myjson.com/bins/81s15' }\n];\nlet counter = 0;\nexport function setApiList(api, name) {\n    if (!name) name = counter;\n    let element = { name: name, uri: api }\n    //APILIST[counter++] = element\n    APILIST.push(element);\n    counter++;\n}\nexport function getApiList() {\n    return APILIST;\n}","import { VALUES, PLAYERX } from \"../constants/constants\";\n\nfunction gameReducer(state = VALUES, action) {\n    console.log('gameReducer')\n    switch (action.type) {\n        case 'PLAY_POSITION':\n            let newState = JSON.parse(JSON.stringify(state));\n            let newValue = action.turn === PLAYERX ? 'X' : '0';\n            newState[action.x][action.y] = newValue;\n            return newState;\n        case 'RESET':\n            let resetState = [\n                [\"-\", \"-\", \"-\"],\n                [\"-\", \"-\", \"-\"],\n                [\"-\", \"-\", \"-\"]\n            ];\n            return resetState;\n        case 'FETCH_STATE_SUCESS':\n            return action.state.values;\n        default:\n            return state;\n    }\n}\nexport default gameReducer;","import { VALUES, PLAYERX, PLAYER0 } from \"../constants/constants\";\n\nfunction turnReducer(state = VALUES, action) {\n    console.log('turnReducer')\n    switch (action.type) {\n        case 'PLAY_POSITION':\n            return action.turn === PLAYERX ? PLAYER0 : PLAYERX;\n        case 'RESET':\n            return PLAYERX;\n        case 'FETCH_STATE_SUCESS':\n            return action.state.turn;\n        default:\n            return state;\n    }\n}\nexport default turnReducer;","import { VALUES } from \"../constants/constants\";\n\nfunction p(state = VALUES, action) {\n    let moves;\n    console.log()\n    switch (action.type) {\n        case 'PLAY_POSITION':\n            moves = action.movements + 1;\n            return moves;\n        case 'RESET':\n            moves = 0;\n            return moves;\n        default:\n            return state;\n    }\n}\nexport default p;","\nfunction playerReducer(state = \"\", action) {\n    console.log('playerReducer')\n    switch (action.type) {\n        case 'NEW_PLAYER':\n            return action.player_name;\n        case 'FETCH_STATE_SUCESS':\n            return action.state.player_name ? action.state.player_name : \"\";\n        default:\n            return state;\n    }\n}\nexport default playerReducer;","import { combineReducers } from \"redux\";\nimport gameRecuder from './gameReducer';\nimport turnReducer from \"./turnReducer\";\nimport move from \"./moveReducer\";\nimport { connectRouter } from 'connected-react-router';\nimport { createBrowserHistory } from 'history';\nimport fetchReducer from \"./fetchReducer\";\nimport playerReducer from \"./playerReducer\";\n\nconst history = createBrowserHistory();\n\nexport const globalState = combineReducers({\n    turn: turnReducer,\n    values: gameRecuder,\n    movements: move,\n    fetch: fetchReducer,\n    player_name: playerReducer,\n    router : connectRouter(history)\n});\n\n","import { FETCH } from '../constants/constants';\n\nexport default function fetchReducer(state = FETCH, action) {\n    let newState;\n    switch (action.type) {\n        case 'FETCH_STATE_BEGIN':\n            newState = JSON.parse(JSON.stringify(state));\n            newState.fetching = true;\n            return newState;\n        case 'FETCH_STATE_SUCESS':\n            newState = JSON.parse(JSON.stringify(state));\n            newState.fetching = false;\n            newState.finish = true;\n            return newState;\n        case 'FETCH_STATE_FAILURE':\n            newState = JSON.parse(JSON.stringify(state));\n            newState.fetching = false;\n            newState.error = action.error;\n            return newState\n        default:\n            return state;\n    }\n}","import { API, URISAVE, APILIST } from \"../constants/constants\";\n\nexport function playPosition(x, y, turn, movements) {\n    console.log('playPosition')\n    return {\n        type: 'PLAY_POSITION',\n        x: x,\n        y: y,\n        turn: turn,\n        movements: movements\n    }\n};\nexport function resetGame() {\n    console.log('resetGameeeee')\n    return {\n        type: 'RESET',\n    }\n};\n\nexport function newPlayer(player_name) {\n    return {\n        type: 'NEW_PLAYER',\n        player_name: player_name\n    }\n}\n\nexport function fetchState(uri = API.uri) {\n    console.log(uri)\n    return dispatch => {\n        dispatch(fetchStateBegin());\n        return fetch(uri)\n            .then(handleErrors)\n            .then(res => res.json())\n            .then(json => {\n                return dispatch(fetchStateSucess(json));\n            })\n            .catch(error => {\n                console.log(error);\n                return dispatch(fetchStateFailure(error));\n            })\n    }\n};\nexport function fetchStateBegin() {\n    return {\n        type: 'FETCH_STATE_BEGIN'\n    }\n};\nexport function fetchStateSucess(json) {\n    return {\n        type: 'FETCH_STATE_SUCESS',\n        state: json\n    }\n};\nexport function fetchStateFailure(error) {\n    return {\n        type: 'FETCH_STATE_FAILURE',\n        error: error\n    }\n};\n\nexport async function saveGame(value) {\n    return await fetch(URISAVE, {\n        method: 'POST', // or 'PUT'\n        body: JSON.stringify(value), // data can be `string` or {object}!\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    })\n        .then(res => res.json())\n        .then(response => {\n            console.log('Success:', JSON.stringify(response));\n            return response;\n        })\n        .catch(error => {\n            console.error('Error:', error);\n            throw new Error('Couldnt save the game');\n        });\n};\n\n// function to get the uri of the saved game given a name\nexport function getUri(name) {\n    let uri;\n    APILIST.every((element, index) => {\n        if (element.name === name) {\n            uri = element.uri;\n            return false;\n        }\n        return true;\n    })\n    return uri;\n}\n// function to check if the name we want to save already exists\nexport function existName(name) {\n    let exist = false;\n    APILIST.every((element, index) => {\n        if (element.name === name) {\n            exist = true;\n            return false;\n        }\n        return true;\n    })\n    return exist;\n}\n\n//function to simulate the retrieve of list game in a server\n// TODO , reorganize the fetch call dependen on how's the structure of the apilist\nexport async function getListGame() {\n    return await APILIST.forEach(element => {\n        return fetch(element)\n            .then((res) => {\n                res.json();\n            })\n            .then((response) => {\n                console.log('Success:', JSON.stringify(response));\n                return response;\n            });\n    })\n}\n\nfunction handleErrors(response) {\n    if (!response.ok) {\n        console.log(`ERROR: ${response.statusText}`);\n        throw Error(response.statusText);\n    }\n    return response;\n}","import React from 'react';\nimport { NavLink } from 'react-router-dom'\n\nexport default class Header extends React.Component {\n    render() {\n        return (\n            <header>\n                <h1>Welcome to TICTATOE</h1>\n                <nav>\n                    <NavLink exact to='/'> HOME</NavLink>\n                    <NavLink exact to='/new'> NEW GAME</NavLink>\n                    <NavLink exact to='/continue'> CONTINUE</NavLink>\n                    <NavLink exact to='/savedGames' pep='pepep'> SAVED GAMES</NavLink>\n                </nav>\n            </header>\n        );\n    }\n}","import React from 'react';\n\nexport default class Header extends React.Component {\n    render() {\n        return (\n            <header>\n                <h3>{this.props.welcome_text}<br/>\n                    {this.props.textt}\n                </h3>\n            </header>\n        );\n    }\n}","import React from 'react';\n\nconst squareStyle = {\n    height: \"100px\",\n    width: \"100px\"\n}\n\nexport default class Square extends React.Component {\n    constructor(props) {\n        super(props);\n        this.squareClick = this.squareClick.bind(this)\n    }\n    squareClick(rowIndex, columIndex, value, board) {\n        if (value === '-') {\n            this.props.boardClick(rowIndex, columIndex)\n        }\n    }\n    render() {\n        let myclassName = \"mybutton \";\n        myclassName += this.props.value === '-' ? \"clickable\" : \"no_clickable\";\n        return (\n            <button className={myclassName} onClick={() => this.squareClick(this.props.rowIndex, this.props.columnIndex, this.props.value, this.props.board)}\n                style={squareStyle}>{this.props.value}</button>\n        );\n    }\n}","import React from 'react';\nimport Square from './Square'\n\nexport default class Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.boardClick = this.boardClick.bind(this)\n    }\n    boardClick(rowIndex, columnIndex) {\n        this.props.appClick(rowIndex, columnIndex);\n    }\n    render() {\n        let board = this.props.values.map((rowValues, rowIndex) => {\n            let row = rowValues.map((value, columnIndex) => {\n                return (<Square boardClick={this.boardClick} board={this.props.values}\n                    rowIndex={rowIndex} columnIndex={columnIndex}\n                    key={\"\" + rowIndex + columnIndex} value={value}></Square>);\n\n            })\n            return (<div key={\"row\" + rowIndex}>{row}</div>);\n        });\n        return (\n            <div>\n                {board}\n            </div>\n        );\n    }\n}","import React from 'react';\n//import logo from '../logo.svg';\nimport '../../assets/styles/index.css';\nimport Header from './Header';\nimport Board from './Board';\n//import { tsConstructorType } from '@babel/types';\nimport { connect } from \"react-redux\";\nimport { setApi, setApiList } from \"../../constants/constants\";\nimport {\n  playPosition, newPlayer, resetGame,\n  fetchState, saveGame, existName, getUri\n} from '../../reducers/actions';\n// let p = require('../../constants/constants');\n\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { player_name: \"\", name_game: \"\" };\n    this.appClick = this.appClick.bind(this);\n    this.reset = this.reset.bind(this);\n    this.handlePlayerInputChange = this.handlePlayerInputChange.bind(this);\n    this.handlePlayerSubmit = this.handlePlayerSubmit.bind(this);\n    this.saveGame = this.saveGame.bind(this);\n    this.handleGameSubmit = this.handleGameSubmit.bind(this);\n    this.handleGameName = this.handleGameName.bind(this);\n    console.log('APPPP');\n  }\n\n  appClick(rowIndex, columIndex) {\n    console.log('click')\n    this.props.dispatch(playPosition(rowIndex, columIndex, this.props.turn, this.props.movements));\n  }\n  componentDidMount() {\n    console.log(this.props.router)\n    console.log(this.props.uri)\n    console.log('*******')\n    if (this.props.continue) {\n      let uri = (this.props.router.split('/')[2] || undefined );\n      console.log(uri)\n      this.props.dispatch(fetchState(getUri(uri)));\n    } else {\n      // we set also the name player to '' otherwise in the render it will take as if it already have a name so we cant put a new name\n      this.props.dispatch(newPlayer(''));\n      // to reset the game\n      this.props.dispatch(resetGame());\n    }\n  }\n  handlePlayerSubmit(event) {\n    console.log('Submiting value. ' + this.state.player_name);\n    event.preventDefault();\n    this.props.dispatch(newPlayer(this.state.player_name))\n  }\n  handlePlayerInputChange(event) {\n    this.setState({ player_name: event.target.value });\n  }\n\n  async handleGameSubmit(event) {\n    console.log('Submiting value. ' + this.state.name_game);\n    event.preventDefault();\n    if (!existName(this.state.name_game)) {\n      await this.saveGame();\n      alert('Your game have been saved');\n    } else {\n      alert('Sorry the choosen name already exist. Please type another')\n    }\n  }\n  handleGameName(event) {\n    this.setState({ name_game: event.target.value });\n  }\n\n  reset() {\n    console.log('Reeeeeeeeset');\n    this.props.dispatch(resetGame());\n  }\n\n  async saveGame() {\n    let jsonSave = {\n      values: this.props.values,\n      turn: this.props.turn,\n      player_name: this.state.player_name || this.props.player_name\n    }\n    console.log(jsonSave)\n    let uri = await saveGame(jsonSave);\n    console.log(uri);\n    setApi(uri.uri, this.state.name_game);\n    setApiList(uri.uri, this.state.name_game);\n  }\n\n  render() {\n    console.log('in render :', this.state, this.props.player_name)\n    if (this.props.fetch.fetching) {\n      return <div className=\"loader\"></div>;\n    } else if (this.props.fetch.fetching === false && this.props.fetch.error) {\n      console.log(this.props.fetch.error);\n      return <h3> Error getting from server</h3>;\n    } else {\n      if (this.props.player_name !== \"\") {\n        let text = \"Turn of \" + this.props.turn;\n        let welcome_text = `Welcome ${this.props.player_name}`\n        return (\n          <div>\n            <Header textt={text} welcome_text={welcome_text}>\n            </Header>\n            <Board appClick={this.appClick} values={this.props.values}>\n            </Board>\n            <p>Number of movements: {this.props.movements}</p>\n            <button onClick={this.reset}>RESET</button>\n\n            <form onSubmit={this.handleGameSubmit}>\n              <label>\n                Introduce your name game:\n            <input type=\"text\" value={this.state.name_game} onChange={this.handleGameName} />\n                <input className=\"save\" type=\"submit\" value=\"SAVE GAME\" />\n              </label>\n            </form>\n            <button onClick={this.saveGame}>SAVE GAME</button>\n          </div>\n        );\n      } else {\n        return (<header>\n          <form onSubmit={this.handlePlayerSubmit}>\n            <label>\n              Introduce player name:\n            <input type=\"text\" value={this.state.player_name} onChange={this.handlePlayerInputChange} />\n              <input className=\"submit\" type=\"submit\" value=\"Submit\" />\n            </label>\n          </form>\n        </header>)\n      }\n    }\n  }\n}\n\n//this function map the state to  props\nfunction mapStateToProps(state) {\n  console.log('mapstatetoprops')\n  return {\n    values: state.values,\n    turn: state.turn,\n    movements: state.movements,\n    fetch: state.fetch,\n    player_name: state.player_name,\n    router: state.router.location.pathname\n  }\n};\n\n//we export our App as a param\nexport default connect(mapStateToProps)(Game);\n//export default App;\n","import React from 'react';\n\nexport default class Home extends React.Component {\n    render() {\n        return (\n            <div className=\"frontbody\">\n                Hello this is the home page\n            </div>\n        )\n    }\n}","import React from 'react';\nimport { APILIST } from \"../../constants/constants\";\nimport { Link } from \"react-router-dom\";\n\n\nexport default class ItemList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {APILIST};\n        this.load = this.load.bind(this);\n        this.deleteAll = this.deleteAll.bind(this);\n    }\n    load(el){\n        console.log('load');\n        this.props.loadGame(el.uri);\n    }\n    delete(el){\n        console.log('delete');\n        let pos;\n        APILIST.forEach((ele, index) => {\n            if(el.name === ele.name){\n                pos = index;\n            }\n        })\n        APILIST.splice(pos, 1);\n        this.setState(APILIST);\n    }\n    deleteAll(){\n        APILIST.splice(0, APILIST.length);\n        this.setState(APILIST);\n    }\n\n    render() {\n        //let keys = Object.keys(APILIST)\n        return (\n        <div>\n            {APILIST.map((el,index) => {\n                return <div key={\"item\" + index}>\n                {el.name} : \n                <Link to={`/continue/${el.name}`} pepe='pepe' > CONTINUE </Link> \n                <button onClick={() => this.delete(el)}> DELETE </button>\n                </div>\n            })}\n            <button onClick={() => this.deleteAll()}> DELETE ALL</button>\n        </div>\n        );\n    }\n}","import React from 'react';\n//import logo from '../logo.svg';\nimport '../../assets/styles/index.css';\nimport { setApiList } from \"../../constants/constants\";\nimport { saveGame } from \"../../reducers/actions\";\nimport ItemList from \"./itemList\";\n\nexport default class SavedGames extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { showGame: false, uri: '' }\n        this.loadGame = this.loadGame.bind(this);\n        this.deleteGame = this.deleteGame.bind(this);\n        console.log(this.props)\n    }\n\n    async saveMatch() {\n        let jsonSave = {\n            values: this.props.values,\n            turn: this.props.turn,\n            player_name: this.state.player_name\n        }\n        let uri = await saveGame(jsonSave);\n        console.log(uri);\n        setApiList(uri.uri);\n    }\n    loadGame(el) {\n        console.log('loading');\n        console.log(el);\n        this.setState({ showGame: true, uri: el });\n    }\n    deleteGame(el) {\n        console.log('deleting');\n    }\n    render() {\n        /*if (this.state.showGame) {\n            return (\n                <div>\n                    <Game continue={true} uri={this.state.uri}>\n                    </Game>\n                </div>\n            );\n        } else {*/\n            return (\n                <div>\n                    <h1>List of games saved:</h1>\n                    <ItemList loadGame={this.loadGame} deleteGame={this.deleteGame}>\n                    </ItemList>\n                </div>\n            )\n        //}\n    }\n}\n","import React from 'react';\nimport { Route } from \"react-router-dom\";\nimport Game from './Tictactoe/Game';\nimport Home from './Home';\nimport SavedGames from './Tictactoe/SavedGames'\n\nexport default class Main extends React.Component {\n    render() {\n        return (\n            <section>\n                <Route exact path='/' component={Home} />\n                <Route path='/new' component={Game} />\n                <Route exact path='/continue/(:id)' component={() => <Game continue={false}/>} />\n                <Route path='/continue' component={() => <Game continue={true} />} />\n                <Route path='/savedGames' component={SavedGames} />\n            </section>)\n    }\n}\n// this.props.routeParams.page.\n\n// <Route exact path='/continue/:id' component={() => <Game continue={false}/>} />","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { PLAYERX, VALUES, PLAYER0 } from '../constants/constants';\nimport { globalState } from \"../reducers/reducers\";\nimport { resetGame } from '../reducers/actions';\nimport { connectRouter, ConnectedRouter, routerMiddleware } from \"connected-react-router\";\nimport { createBrowserHistory } from 'history';\nimport Header from './Header';\nimport Main from './Main';\nimport thunk from 'redux-thunk';\n\nconst history = createBrowserHistory();\n\nexport default class ReduxProvider extends React.Component {\n    constructor(props) {\n        super(props);\n        this.initialState = { values: VALUES, turn: PLAYERX, movements: 0 }\n        this.store = createStore(\n            connectRouter(history)(globalState),\n            this.initialState,\n            compose(applyMiddleware(routerMiddleware(history), thunk))\n        );\n        this.store.subscribe(() => {\n            let state = this.store.getState();\n            this.checkWinner(state.values, state.turn);\n        });\n        console.log('REDUX PROVIDER')\n    }\n\n    checkWinner(board, turn) {\n        let wincolum = this.checkColumn(board);\n        let winRow = this.checkRow(board);\n        let winDiagonal = this.checkDiagonal(board);\n        let isFinish = this.isFinish(board);\n        //if we have a winner if row or column or diagonal we finish\n        if (wincolum || winRow || winDiagonal) {\n            alert(`${turn === PLAYERX ? PLAYER0 : PLAYERX} won.`)\n            setTimeout(() => {\n                this.store.dispatch(resetGame());\n            }, 2000);\n            return;\n        }\n        //if the match is finish we restar it \n        if (isFinish) {\n            alert(`Equals, restarting the game...`)\n            setTimeout(() => {\n                this.store.dispatch(resetGame());\n            }, 2000);\n        }\n    }\n    //method to check the columns\n    checkColumn(board) {\n        let win = false;\n        for (let i = 0; i < board[i].length; i++) {\n            if (this.getCol(board, i)) {\n                win = true;\n            }\n            if (!board[i + 1]) break;\n        }\n        return win;\n    }\n    //method to check the rows\n    checkRow(board) {\n        let win = false;\n        board.forEach(element => {\n            if (this.checkArray(element)) {\n                win = true;\n            }\n        });\n        return win;\n    }\n    //method to get the diagonals and check if winner\n    checkDiagonal(board) {\n        return this.getDiagonal(board);\n    }\n    //method to get the column and check if winner\n    getCol(board, col) {\n        let column = [];\n        for (let i = 0; i < board.length; i++) {\n            column.push(board[i][col]);\n        }\n        return this.checkArray(column);\n    }\n    //method to get the two diagonals and check if winner\n    getDiagonal(board) {\n        let diagonal1 = [];\n        let diagonal2 = [];\n        let diagonals = [];\n        let win = false;\n        for (let i = 0, j = 0; i < board[i].length; i++ , j++) {\n            diagonal1.push(board[i][j]);\n            if (!board[i + 1]) break;\n        }\n        for (let i = 0, j = board[0].length; j > 0; i++ , j--) {\n            diagonal2.push(board[i][j - 1]);\n        }\n        diagonals.push(diagonal1, diagonal2);\n        diagonals.forEach(element => {\n            if (this.checkArray(element)) {\n                win = true;\n            }\n        });\n        return win;\n    }\n    //method to check if the array has all sames values\n    checkArray(row) {\n        let winner = true;\n        for (let i = 0; i < row.length - 1; i++) {\n            if (row[i] === '-' || row[i] !== row[i + 1]) {\n                winner = false;\n            }\n        }\n        return winner;\n    }\n    //method to check if the math is finish\n    isFinish(board) {\n        let finish = true;\n        board.forEach(element => {\n            element.forEach((value) => {\n                if (value === '-') {\n                    finish = false;\n                }\n            })\n        });\n        return finish;\n    }\n\n\n    render() {\n        return (\n            <Provider store={this.store}>\n                <ConnectedRouter history={history} >\n                    <div style={{ height: '100%', textAlign: 'center' }}>\n                        <Header />\n                        <Main />\n                    </div>\n                </ConnectedRouter>\n            </Provider>\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/styles/index.css';\nimport ReduxProvider from './components/ReduxProvider';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<ReduxProvider />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}